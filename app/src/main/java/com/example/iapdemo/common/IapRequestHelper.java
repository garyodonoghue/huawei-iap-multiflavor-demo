package com.example.iapdemo.common;

import android.app.Activity;
import android.content.Context;
import android.content.IntentSender;
import android.util.Log;
import android.widget.Toast;

import com.hmsdemo.doubleballsapp.huawei.R;
import com.huawei.hmf.tasks.OnFailureListener;
import com.huawei.hmf.tasks.OnSuccessListener;
import com.huawei.hmf.tasks.Task;
import com.huawei.hms.support.api.client.Status;
import com.huawei.hms.support.api.entity.iap.ConsumePurchaseReq;
import com.huawei.hms.support.api.entity.iap.GetBuyIntentReq;
import com.huawei.hms.support.api.entity.iap.GetPurchaseReq;
import com.huawei.hms.support.api.entity.iap.OrderStatusCode;
import com.huawei.hms.support.api.entity.iap.SkuDetailReq;
import com.huawei.hms.support.api.iap.ConsumePurchaseResult;
import com.huawei.hms.support.api.iap.GetBuyIntentResult;
import com.huawei.hms.support.api.iap.GetPurchasesResult;
import com.huawei.hms.support.api.iap.IsBillingSupportedResult;
import com.huawei.hms.support.api.iap.SkuDetailResult;
import com.huawei.hms.support.api.iap.json.Iap;
import com.huawei.hms.support.api.iap.json.IapApiException;
import com.huawei.hms.support.api.iap.json.IapClient;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

/**
 * the tool class of Iap interface
 */
public class IapRequestHelper {
    private final static String TAG = "IapRequestHelper";

    /**
     * Create a GetBuyIntentReq request
     * @param type In-app product type.
     * @param skuId ID of the in-app product to be paid.
     *              The in-app product ID is the product ID you set during in-app product configuration in AppGallery Connect.
     * @return GetBuyIntentReq
     */
    public static GetBuyIntentReq createGetBuyIntentReq(int type, String skuId) {
        GetBuyIntentReq request = new GetBuyIntentReq();
        request.productId = skuId;
        request.priceType = type;
        request.developerPayload = "test";
        return request;
    }

    /**
     * Create a ConsumePurchaseReq request
     * @param purchaseData which is generated by the Huawei payment server during product payment and returned to the app through InAppPurchaseData.
     *                     The app transfers this parameter for the Huawei payment server to update the order status and then deliver the in-app product.
     * @return ConsumePurchaseReq
     */
    public static ConsumePurchaseReq createConsumePurchaseReq(String purchaseData) {
        ConsumePurchaseReq consumePurchaseRequest = new ConsumePurchaseReq();
        String purchaseToken = "";
        try {
            JSONObject jsonObject = new JSONObject(purchaseData);
            purchaseToken = jsonObject.optString("purchaseToken");
        } catch (JSONException e) {

        }
        consumePurchaseRequest.purchaseToken = purchaseToken;
        return consumePurchaseRequest;
    }

    /**
     * Create a GetPurchaseReq request
     * @param type In-app product type.
     * @return GetPurchaseReq
     */
    public static GetPurchaseReq createGetPurchaseReq(int type) {
        GetPurchaseReq getPurchaseRequest = new GetPurchaseReq();
        getPurchaseRequest.priceType = type;
        return getPurchaseRequest;
    }

    /**
     * Create a SkuDetailReq request
     * @param type In-app product type.
     * @param skuList ID list of products to be queried. Each product ID must exist and be unique in the current app.
     * @return
     */
    public static SkuDetailReq createGetSkuDetailReq(int type, ArrayList<String> skuList) {
        SkuDetailReq skuDetailRequest = new SkuDetailReq();
        skuDetailRequest.priceType = type;
        skuDetailRequest.skuIds = skuList;
        return skuDetailRequest;
    }

    /**
     * Initiating an isbillingsupported request when entering the app
     * @param activity indicates the activity object that initiates a request.
     */
    public static void initIap(final Activity activity) {
        isBillingSupported(activity);
    }

    /**
     *  to check whether the country or region of the logged in HUAWEI ID is included in the countries or regions supported by HUAWEI IAP.
     * @param activity indicates the activity object that initiates a request.
     */
    public static void isBillingSupported(final Activity activity) {
        Log.i(TAG, "call isBillingSupported");
        IapClient mClient = Iap.getIapClient(activity);
        Task<IsBillingSupportedResult> task = mClient.isBillingSupported();
        task.addOnSuccessListener(new OnSuccessListener<IsBillingSupportedResult>() {
            @Override
            public void onSuccess(IsBillingSupportedResult result) {
                //query the products that the user has purchased and deliver products
                getPurchase(activity, Constants.PRODUCT_TYPE_CONSUMABLE);
                // query products and show product information to user
                queryProductInfo(activity);
            }
        }).addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(Exception e) {
                Toast.makeText(activity, activity.getString(R.string.external_error), Toast.LENGTH_SHORT).show();
                Log.d(TAG, "isBillingSupported fail");
                if (e instanceof IapApiException) {
                    IapApiException apiException = (IapApiException)e;
                    int returnCode = apiException.getStatusCode();
                    Log.d("isBillingSupported", "returnCode: " + returnCode);
                    // handle error scenarios
                    if (returnCode == OrderStatusCode.ORDER_HWID_NOT_LOGIN) {
                        //to login
                        Status status = apiException.getStatus();
                        startResolutionForResult(activity, status, Constants.REQ_CODE_LOGIN);
                    } else if (returnCode == OrderStatusCode.ORDER_ACCOUNT_AREA_NOT_SUPPORTED) {
                        Toast.makeText(activity, activity.getString(R.string.unsupported_country),Toast.LENGTH_SHORT).show();
                    }
                } else {
                    Log.e(TAG, e.getMessage());

                }

            }
        });
    }

    /**
     * Initiating a getSkuDetail request
     * @param context indicates the context object that initiates a request.
     */
    public static void queryProductInfo(Context context) {
        ArrayList<String> products1 = new ArrayList<>();
        products1.add("doubleballNO1");
        getSkuDetails(context,products1,Constants.PRODUCT_TYPE_CONSUMABLE);
    }

    /**
     * obtain in-app product details configured in AppGallery Connect
     * @param context indicates the context object that initiates a request.
     * @param skuList ID list of products to be queried. Each product ID must exist and be unique in the current app.
     * @param type In-app product type.
     */
    public static void getSkuDetails(final Context context, final ArrayList<String> skuList, int type) {
        Log.i(TAG, "query product");
        IapClient mClient = Iap.getIapClient(context);

        Task<SkuDetailResult> task = mClient.getSkuDetail(createGetSkuDetailReq(type, skuList));
        task.addOnSuccessListener(new OnSuccessListener<SkuDetailResult>() {
            @Override
            public void onSuccess(SkuDetailResult result) {
                Log.i(TAG, "getSkuDetail, success");
                if (result == null) {
                    return;
                }
                if (result.getSkuList() != null) {
                    // to show product information
                }
            }
        }).addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(Exception e) {
                Toast.makeText(context, e.getMessage(), Toast.LENGTH_SHORT).show();
                if (e instanceof IapApiException) {
                    IapApiException apiException = (IapApiException)e;
                    int returnCode = apiException.getStatusCode();
                    Log.i(TAG, "getSkuDetail, returnCode: " + returnCode);
                    // handle error scenarios
                    if (returnCode == OrderStatusCode.ORDER_HWID_NOT_LOGIN) {
                        // Unlogged scene
                        Log.i(TAG,"you are not logged in");
                    } else {
                        // handle other error scenarios
                    }
                } else {
                    // Other external errors
                    Log.e(TAG, e.getMessage());
                }
            }
        });
    }

    /**
     * create orders for in-app products in the PMS
     * @param activity indicates the activity object that initiates a request.
     * @param skuId ID list of products to be queried. Each product ID must exist and be unique in the current app.
     * @param type  In-app product type.
     */
    public static void getBuyIntent(final Activity activity, String skuId, int type) {
        Log.d(TAG, "call getBuyIntent");
        IapClient mClient = Iap.getIapClient(activity);
        Task<GetBuyIntentResult> task = mClient.getBuyIntent(createGetBuyIntentReq(type, skuId));
        task.addOnSuccessListener(new OnSuccessListener<GetBuyIntentResult>() {
            @Override
            public void onSuccess(GetBuyIntentResult result) {
                Log.d(TAG, "getBuyIntent, onSuccess");
                if (result == null) {
                    Log.d(TAG, "result is null");
                    return;
                }
                Status status = result.getStatus();
                if (status == null) {
                    Log.d(TAG, "status is null");
                    return;
                }
                // you should pull up the page to complete the payment process
                startResolutionForResult(activity, status, Constants.REQ_CODE_BUY);
            }
        }).addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(Exception e) {
                Toast.makeText(activity, e.getMessage(), Toast.LENGTH_SHORT).show();
                if (e instanceof IapApiException) {
                    IapApiException apiException = (IapApiException)e;
                    int returnCode = apiException.getStatusCode();
                    Log.d(TAG, "getBuyIntent, returnCode: " + returnCode);
                    // handle error scenarios
                } else {
                    // Other external errors
                    Log.e(TAG, e.getMessage());
                }

            }
        });
    }

    /**
     * to start an activity.
     * @param activity the activity to launch a new page.
     * @param status This parameter contains the pendingIntent object of the payment page.
     * @param reqCode Result code.
     */
    private static void startResolutionForResult(Activity activity, Status status, int reqCode) {
        if (status == null) {
            Log.e(TAG, "status is null");
            return;
        }
        if (status.hasResolution()) {
            try {
                status.startResolutionForResult(activity, reqCode);
            } catch (IntentSender.SendIntentException exp) {
                Log.e(TAG, exp.getMessage());
            }
        } else {
            Log.e(TAG, "intent is null");
        }
    }


    /**
     * query information about all subscribed in-app products, including consumables, non-consumables, and auto-renewable subscriptions.</br>
     * If consumables are returned, the system needs to deliver them and calls the consumePurchase API to consume the products.
     * If non-consumables are returned, the in-app products do not need to be consumed.
     * If subscriptions are returned, all existing subscription relationships of the user under the app are returned.
     * <p></p>
     */
    public static void getPurchase(final Context context, final int type) {
        Log.i(TAG, "call getPurchase");
        IapClient mClient = Iap.getIapClient(context);
        Task<GetPurchasesResult> task = mClient.getPurchases(IapRequestHelper.createGetPurchaseReq(type));
        task.addOnSuccessListener(new OnSuccessListener<GetPurchasesResult>() {
            @Override
            public void onSuccess(GetPurchasesResult result) {
                if (result == null) {
                    Log.i(TAG, "result is null");
                    return;
                }
                Log.i(TAG, "getPurchases, success");
                if (result.getInAppPurchaseDataList() != null && type == Constants.PRODUCT_TYPE_CONSUMABLE) {
                    // Need to consume all the products with type 0 and deliver products
                    List<String> inAppPurchaseDataList = result.getInAppPurchaseDataList();
                    List<String> inAppSignature= result.getInAppSignature();
                    for (int i = 0; i < inAppPurchaseDataList.size(); i++) {
                        consumePurchase(context, inAppPurchaseDataList.get(i), inAppSignature.get(i));
                    }

                }
            }
        }).addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(Exception e) {
                Toast.makeText(context, e.getMessage(), Toast.LENGTH_SHORT).show();
                if (e instanceof IapApiException) {
                    IapApiException apiException = (IapApiException)e;
                    int returnCode = apiException.getStatusCode();
                    Log.i(TAG, "getPurchase, returnCode: " + returnCode);
                } else {
                    // Other external errors
                    Log.e(TAG, e.getMessage());
                }

            }
        });

    }

    /**
     * obtain the historical consumption information about a consumable in-app product
     * or all subscription receipts of a subscription.
     * @param context indicates the context object that initiates a request.
     */
    public static void getPurchaseHistory(final Context context) {
        Log.i(TAG, "call getPurchaseHistory");
        IapClient mClient = Iap.getIapClient(context);
        Task<GetPurchasesResult> task = mClient.getPurchaseHistory(createGetPurchaseReq(Constants.PRODUCT_TYPE_CONSUMABLE));
        task.addOnSuccessListener(new OnSuccessListener<GetPurchasesResult>() {
            @Override
            public void onSuccess(GetPurchasesResult result) {
                Toast.makeText(context, "getPurchaseHistory, success", Toast.LENGTH_SHORT).show();
                Log.i(TAG, "getPurchaseHistory, success");
            }
        }).addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(Exception e) {
                Toast.makeText(context, e.getMessage(), Toast.LENGTH_SHORT).show();
                if (e instanceof IapApiException) {
                    IapApiException apiException = (IapApiException)e;
                    int returnCode = apiException.getStatusCode();
                    Log.i(TAG, "getPurchaseHistory, returnCode: " + returnCode);
                    // handle error scenarios
                } else {
                    // Other external errors
                    Log.e(TAG, e.getMessage());
                }
            }
        });
    }

    /**
     * consume all the unconsumed purchases with type 0
     * @param inAppPurchaseData JSON string that contains purchase order details.
     * @param inAppSignature signature of inAppPurchaseData
     */
    public static void consumePurchase(final Context context, String inAppPurchaseData, String inAppSignature) {
        Log.i(TAG, "call consumePurchase");
        IapClient mClient = Iap.getIapClient(context);
        // verify signature of inAppPurchaseDataList
        boolean success = CipherUtil.doCheck(inAppPurchaseData, inAppSignature, Key.getPublicKey());
        if (success) {
            Log.i(TAG, "verify success");
            Task<ConsumePurchaseResult> task = mClient.consumePurchase(createConsumePurchaseReq(inAppPurchaseData));
            task.addOnSuccessListener(new OnSuccessListener<ConsumePurchaseResult>() {
                @Override
                public void onSuccess(ConsumePurchaseResult result) {
                    // Consume success
                    Log.i(TAG, "consumePurchase success");
                    Toast.makeText(context, "Pay success,and the product has been delivered", Toast.LENGTH_SHORT).show();
                }
            }).addOnFailureListener(new OnFailureListener() {
                @Override
                public void onFailure(Exception e) {
                    Toast.makeText(context, e.getMessage(), Toast.LENGTH_SHORT).show();
                    if (e instanceof IapApiException) {
                        IapApiException apiException = (IapApiException)e;
                        int returnCode = apiException.getStatusCode();
                        Log.i(TAG, "consumePurchase fail,returnCode: " + returnCode);
                    } else {
                        // Other external errors
                        Log.e(TAG, e.getMessage());
                        Toast.makeText(context, context.getString(R.string.external_error), Toast.LENGTH_SHORT).show();
                    }

                }
            });
        }

    }

}
